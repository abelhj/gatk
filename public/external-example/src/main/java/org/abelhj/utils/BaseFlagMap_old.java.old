package org.abelhj;


import java.util.LinkedHashMap;
import java.util.ArrayList;

public class BaseFlagMap {


    public ArrayList<Character> nucs=null;
    public ArrayList<Integer> flags=null;

    public LinkedHashMap<Character, LinkedHashMap<Integer,ArrayList<Integer> > > map=null;


    public BaseFlagMap(){
        nucs=new ArrayList<Character>();
        nucs.add('A');
        nucs.add('C');
        nucs.add('G');
        nucs.add('T');
        nucs.add('N');
        flags=new ArrayList<Integer>();
        flags.add(83);
        flags.add(163);
        flags.add(99);
        flags.add(147);
        map=new LinkedHashMap<Character, LinkedHashMap<Integer,ArrayList<Integer> > >();
        for(Character c : nucs) {
            LinkedHashMap<Integer, ArrayList<Integer> > temp=new LinkedHashMap<Integer, ArrayList<Integer> >();
            for(Integer fl : flags) {
                temp.put(fl, new ArrayList<Integer>());
            }
            map.put(c, temp);
        }
    }

    public void fill(ArrayList<BaseFlag> list) {
	for(BaseFlag val : list) 
	    add(val.base, val.flag);
    }

    public int sum() {
	int ss=0;
	for(Character c : nucs) {
	    for(Integer f : flags) 
		ss+=map.get(c).get(f).size();
	}
	return ss;
    }
    

    public int sum(char base) {
        if(nucs.contains(base)) {
            int ss=0;
            for(Integer fl:flags) 
                ss+=map.get(base).get(fl).size();
            return ss;
        }
        else {
            System.err.println("warning: unexpected base "+base);
            return 0;
        }
    }

    public int sum(char base, int flag) {
        if(nucs.contains(base) && flags.contains(flag)) {
            return map.get(base).get(flag).size();
        } else {
            System.err.println("Warning: unexpected base/flag combination "+base+" "+flag);
            return 0;
        }
    }

    public boolean add(char base, int flag) {

        if(nucs.contains(base) && flags.contains(flag)) {
            map.get(base).get(flag).add(flag);
            return true;
        } else return false;
    }

    public void print() {
	for(Character c: nucs) {
	    for(Integer fl : flags) {
		System.err.println(c+"\t"+fl+"\t"+map.get(c).get(fl));
	    }
	}
    }

    public int translateFlag(int f) {
	int g=f;
	if(f==147)
	    g=99;
	if(f==163)
	    g=83;
	return g;
    }

    /*public String printSums() {
        String ret="";
        for(Character c : nucs) {
            if(c!='N') {
                ret+=sum(c)+":";
                int or1=sum(c, 83)+sum(c,163);
                int or2=sum(c, 99)+sum(c, 147);
                ret+=or1+","+or2+";";
            }
        }
	}
        return ret;
	}*/
    
    public String printSums() {
        String ret="";
        for(Character c : nucs) {
            ret+=printSums(c);
        }
        return ret;
    }

    public String printSums(char c) {
        String ret="";
        if(nucs.contains(c)) {
            ret+=sum(c)+":";
            int or1=sum(c, 83)+sum(c,163);
            int or2=sum(c, 99)+sum(c, 147);
            ret+=or1+","+or2+";";
        } else {
            ret+=".:.,.;";
        }
        return ret;
    }

    public char maxBase() {
	int maxct=0;
	char maxbase='N';
	for(Character c : nucs) {
	    int ss=sum(c);
	    if(ss>maxct) {
		maxct=ss;
		maxbase=c;
	    }
	}
	return maxbase;
    }

    public char maxBase(char ref) {
	int maxct=0;
	char maxbase='N';
	for(Character c : nucs) {
	    if(c!=ref) {
		int ss=sum(c);
		if(ss>maxct) {
		    maxct=ss;
		    maxbase=c;
		}
	    }
	}
        return maxbase;
    }
    
    public char maxBase(char ref, boolean ignoreN) {
	if(!ignoreN) {
	    return maxBase(ref);
	} else {
	    int maxct=0;
	    char maxbase='N';
	    for(Character c : nucs) {
		if(c!=ref && c!='N') {
		    int ss=sum(c);
		    if(ss>maxct) {
			maxct=ss;
			maxbase=c;
		    }
		}
	    }
	    return maxbase;
	}
    }
}